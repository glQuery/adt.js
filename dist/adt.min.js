/*
 * adt.js - Algebraic Data Types for JavaScript
 * adt.js is free, public domain software (http://creativecommons.org/publicdomain/zero/1.0/)
 * Originally created by Rehno Lindeque of http://www.mischievousmeerkat.com
 */
var adt = (function() {
"use strict";
var init=function(a,b){var c,d,e;for(c=0;c<b.length;++c){var f=b[c];if(Array.isArray(f))init(a,f);else if(typeof f=="string"||typeof f=="number"){if(f!=="_"&&String(f).charAt(0)==="_")continue;a[f]=makeConstructor(f)}else{if(typeof f!="object"&&typeof f!="function")continue;for(d in f){if(d!=="_"&&d.charAt(0)==="_")continue;typeof f[d]=="function"?a[d]=f[d]:a[d]=function(){return f[d]}}}}},adt=function(){var a={};return init(a,arguments),evaluator(a)},makeConstructor=function(a){return function(){return adt.construct.apply(null,[a].concat([].slice.call(arguments,0)))}},unescapeString=function(a){var b,c="",d={"\\":"\\",'"':'"',"'":"'",t:"\t",r:"\r",n:"\n"};for(b=0;b<a.length-1;++b)if(a[b]!=="\\")c+=a[b];else{var e=d[a[b+1]];c+=e==null?a[b+1]:e,++b}return b===a.length-1?c+a[a.length-1]:c},escapeString=function(a,b){var c,d="",e,b=b||{"\\":"\\\\",'"':'\\"',"'":"\\'","\t":"\\t","\r":"\\r","\n":"\\n"};for(c=0;c<a.length;++c)e=b[a[c]],d+=e==null?a[c]:e;return d};adt.construct=function(a){if(arguments.length<1)throw"Incorrect number of arguments passed to `construct()`.";var b=[String(a)].concat([].slice.call(arguments,1));return b._ADTData=!0,b},adt.deconstruct=function(a){return a&&a._ADTData===!0?{key:a[0],value:a.slice(1)}:{key:typeof a,value:a}};var evaluator=function(a){var b,c=function(){return c.eval.apply(c,arguments)},d=Object.create(a);c.recursive=function(){return c.eval=c.recurse,c},c.eval=function(a){if(typeof a=="string"||typeof a=="number"){var b;return d._key=d._pattern=a,typeof c[a]=="function"?c[a].apply(d,[].slice.call(arguments,1)):c._.apply(d,[].slice.call(arguments,1))}if(Array.isArray(a)&&a._ADTData===!0){if(a.length<1)throw"It shouldn't be possible to have empty ADT constructions";return d._key=d._pattern=a[0],c.eval.apply(c,a)}return a},c.recurse=function(a){if(typeof a=="string"||typeof a=="number"){var b;return d._key=d._pattern=a,typeof c[a]=="function"?b=c[a].apply(d,[].slice.call(arguments,1)):b=c._.apply(d,[].slice.call(arguments,1)),b}if(Array.isArray(a)&&a._ADTData===!0){if(a.length<1)throw"It shouldn't be possible to have empty ADT constructions";var b=new Array(a.length),e="",f;b._ADTData=!0,e=String(a[0]);for(f=1;f<a.length;++f){var g=Array.isArray(a[f])&&a[f]._ADTData===!0?c.recurse(a[f]):a[f];Array.isArray(g)&&g._ADTData===!0?(e=e.concat(" ".concat(g[0])),b[f]=g):(e=e.concat(" ".concat(typeof g)),b[f]=g)}return b[0]=a[0],d._key=d._pattern=b[0],c.recurse.apply(c,b)}return a};for(b in a)switch(b){case"eval":case"recurse":case"recursive":continue;default:b!=="eval"&&(typeof a[b]=="function"?c[b]=function(b){return function(){return a[b].apply(d,arguments)}}(b):c[b]=function(b){return function(){return a[b]}}(b))}return c};adt.constructors=function(a){var b,c=[];if(a!=null)for(b in a)c.push(b);return adt.apply(null,c)},adt.own=function(){var a,b,c,d,e,f={};for(a=0;a<arguments.length;++a){c=arguments[a],d=Object.getOwnPropertyNames(c);for(b=0;b<d.length;++b)e=d[b],f[e]=c[e]}return adt(f)},adt.own.constructors=function(a){var b,c=[];for(b=0;b<arguments.length;++b)c.push(Object.getOwnPropertyNames(arguments[b]));return adt.apply(null,Array.prototype.concat.apply([],c))},adt.serialize=function(){var a=adt("serialized",{_:function(){var a,b={"\\":"\\\\",'"':'\\"',"'":"\\'","\t":"\\t","\r":"\\r","\n":"\\n"," ":"\\ ",",":"\\,","(":"\\(",")":"\\)","[":"\\[","]":"\\]","{":"\\{","}":"\\}"},c=escapeString(this._key,b),d;for(a=0;a<arguments.length;++a)d=adt.deconstruct(arguments[a]),c+=" "+(d.key==="string"?'"'+escapeString(d.value)+'"':d.key==="serialized"?"("+d.value+")":String(d.value));return this.serialized(c)}}).recursive();return String(adt.deconstruct(a.apply(a,arguments)).value)};var eatWhiteSpace=function(a){for(var b=0;b<a.length;++b){switch(a[b]){case" ":case"\n":case"\r":case"\t":continue}return a.slice(b)}return""},lexString=function(a){var b,c=1;for(;;){c=a.indexOf(a[0],c);if(c===-1)throw"No closing quotation mark was found for the string starting with "+a.slice(0,Math.min(5,a.length))+"...";for(b=c-1;b>0;--b)if(a[b]!=="\\"){if(c-b&!0)return{head:a.slice(0,c+1),tail:a.slice(c+1)};break}}},lex=function(a){var b,c=1;a=eatWhiteSpace(a);if(a.length===0)return["",""];switch(a[0]){case"(":case")":case"[":case"]":case",":return{head:a[0],tail:a.slice(1)};case"\\":c=2}for(var d=c;d<a.length;++d)switch(a[d]){case"(":case")":case"[":case"]":case",":case" ":case"\n":case"\r":case"\t":return{head:a.slice(0,d),tail:a.slice(d)};case'"':case"'":return lexString(a);case"\\":if(d===a.length-1)throw"Escape character `\\` found at the end of the input string, followed by nothing.";++d}return{head:a,tail:""}},parseADTTail=function(a){if(a.length<1)throw"No data supplied after opening parenthesis `(`.";var b=unescapeString(a[0]),c=a.slice(1),d=[b];if(a.length>0&&a[0]==="(")throw"Invalid double opening parentheses `((` found.";while(c.length>0)switch(c[0]){case"]":case",":throw"Invalid character `"+c[0]+"` found in the data.";case")":return{result:adt.construct.apply(null,d),tail:c.slice(1)};default:var e=parse(c);if(e==null)continue;d.push(e.result),c=e.tail}throw"Could not find the closing parenthesis for the data `("+a.slice(0,Math.max(a.length,4)).join(" ")+"...`"},parseArrayTail=function(a){if(a.length<2)throw"No data supplied after array opening bracket `[`.";var b=a,c=0,d=[];while(b.length>0)switch(b[0]){case")":throw"Invalid character `"+b[0]+"` found in the data.";case",":++c,c<d.length&&d.push(undefined),b=b.slice(1);continue;case"]":return{result:d,tail:b.slice(1)};default:if(c<d.length)throw"Expected `,` separator between array elements.";var e=parse(b);if(e==null)continue;d.push(e.result),b=e.tail}throw"Could not find the closing bracket for the array `["+a.slice(0,Math.max(a.length,4)).join("")+"...`"},parse=function(a){var b=a[0],c=a.slice(1);if(b.length===0)return;switch(b){case"(":return parseADTTail(c);case"[":return parseArrayTail(c)}switch(b[0]){case'"':return{result:unescapeString(b.slice(1,b.length-1)),tail:c};case"'":return{result:unescapeString(b.slice(1,b.length-1)),tail:c}}var d=Number(b);if(!isNaN(d))return{result:d,tail:c};throw"Unexpected token `"+b+"` in data."};adt.deserialize=function(a){var b=[],c={head:"",tail:a},d=[];while(c.tail.length>0)c=lex(c.tail),b.push(c.head);while(b.length>0&&b[0].length==0)b=b.slice(1);if(b.length==0)return;if(b[0]==="("){if(b[b.length-1]!==")")throw lexemesStr=b.join(" "),"Optional opening parenthesis used for the data "+lexemesStr.slice(0,Math.min(10,lexemesStr.length))+"... but could not find the closing parenthesis."}else switch(b[0][0]){case'"':case"'":case"[":break;default:b=["("].concat(b).concat([")"])}return parse(b).result};  // Export adt to a CommonJS module if exports is available
  if (typeof(exports) !== "undefined" && exports !== null)
    exports.adt = adt;
  return adt;
})();

